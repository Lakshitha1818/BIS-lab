import random

# Step 1: Initialization
def initialize_population(size, min_value, max_value):
    return [random.uniform(min_value, max_value) for _ in range(size)]

# Step 2: Fitness Evaluation
def fitness_function(x):
    return x ** 2

# Step 3: Selection (Roulette-wheel Selection)
def select_parents(population, fitness_values):
    total_fitness = sum(fitness_values)
    selection_probs = [f / total_fitness for f in fitness_values]
    parents = random.choices(population, weights=selection_probs, k=2)
    return parents

# Step 4: Crossover (Linear Combination)
def crossover(parent1, parent2):
    alpha = random.uniform(0, 1)
    child1 = alpha * parent1 + (1 - alpha) * parent2
    child2 = alpha * parent2 + (1 - alpha) * parent1
    return child1, child2

# Step 5: Mutation (with a small probability)
def mutate(individual, mutation_rate, min_value, max_value):
    if random.random() < mutation_rate:
        return random.uniform(min_value, max_value)
    return individual

# Step 6: Replacement (Generate new population)
def create_new_population(population, mutation_rate, min_value, max_value):
    new_population = []
    fitness_values = [fitness_function(x) for x in population]

    for _ in range(len(population) // 2):
        parent1, parent2 = select_parents(population, fitness_values)
        child1, child2 = crossover(parent1, parent2)
        child1 = mutate(child1, mutation_rate, min_value, max_value)
        child2 = mutate(child2, mutation_rate, min_value, max_value)
        new_population.extend([child1, child2])

    return new_population

# Step 7: Genetic Algorithm (Main Loop)
def genetic_algorithm(population_size, min_value, max_value, mutation_rate, generations):
    population = initialize_population(population_size, min_value, max_value)

    for generation in range(generations):
        population = create_new_population(population, mutation_rate, min_value, max_value)

        # Get the best individual in the population
        best_individual = max(population, key=fitness_function)
        print(f"Generation {generation+1}: Best Individual = {best_individual}, Fitness = {fitness_function(best_individual)}")

    return best_individual

# Parameters
population_size = 30
min_value = -10
max_value = 10
mutation_rate = 0.1
generations = 50

# Running the Genetic Algorithm
best_solution = genetic_algorithm(population_size, min_value, max_value, mutation_rate, generations)
print(f"Best solution found: x = {best_solution}, f(x) = {fitness_function(best_solution)}")
